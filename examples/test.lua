---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by minzhou.
--- DateTime: 2021/4/9 下午12:31
---


--package.cpath = ';../src/?.so;'        --搜索so模块
--require("pontus_function_plugin")
--require("utils")

--function A()
--    function B()
--        local x = {1,2,3,4,5,6,7,8}
--        print(x[1],x[2],x[3],x[4])
--    end
--    B()
--end
--
--A()
print("a" .. "b")
local x = false
local y = x or true  -- 这里会生成 C=1 的 LOADBOOL

-- 情况2：if条件中的逻辑运算
if x and y then  -- 可能生成 C=1 的 LOADBOOL
    print("test")
end

local x = 1
local y = 2 + 3

for i = 1, 10 do
    print(i, x + y)
end

-- ====================== test split func ======================
-- print('==================================TEST SPLIT FUNC====================================')
-- local test_str = "23141m213,32135412,,2312,,5654123,,13,,,,123124535,,,21321423543"  
-- local test_delimeter = ",,"

-- -- speed test 
-- local start_timestamp = pontus_timestamp_ms()
-- for i=1,100000 do
--     string.p_split(test_str,test_delimeter)
-- end
-- local end_timestamp = pontus_timestamp_ms()
-- print('Split C++:', end_timestamp - start_timestamp)


-- local start_timestamp = pontus_timestamp_ms()
-- for i=1,100000 do
--     string.split(test_str,test_delimeter)
-- end
-- local end_timestamp = pontus_timestamp_ms()
-- print('Split LUA', end_timestamp - start_timestamp)

-- local c_result = string.p_split(test_str,test_delimeter)
-- local lua_result = string.split(test_str,test_delimeter)

-- -- correctness test 

-- -- check if c_result == lua_result
-- local is_same = true
-- for i=1,#lua_result do
--     if c_result[i] ~= lua_result[i] then
--         print("unsame")
--         is_same = false
--     end
-- end
-- -- output lua_result
-- if is_same then
--     print("test success")
-- else
--     print("test failed")
-- end

-- -- ====================== end test split func ======================



-- -- ====================== test fromhex func ======================
-- print('==================================TEST FROMHEX FUNC====================================')
-- local start_timestamp = pontus_timestamp_ms()
-- for i=1,100000 do
--     string.p_fromhex("562344562344562344562344562344562344562344562344562344562344562344562344562344562344562344")
-- end
-- local end_timestamp = pontus_timestamp_ms()
-- print('FromHex C++:', end_timestamp - start_timestamp)


-- local start_timestamp = pontus_timestamp_ms()
-- for i=1,100000 do
--     string.fromhex("562344562344562344562344562344562344562344562344562344562344562344562344562344562344562344")
-- end
-- local end_timestamp = pontus_timestamp_ms()
-- print('FromHex LUA', end_timestamp - start_timestamp)

-- local c_result = string.p_fromhex("6E6968616F7A6865736869776F64656A6A6A6A")
-- local lua_result = string.fromhex("6E6968616F7A6865736869776F64656A6A6A6A")

-- if c_result == lua_result then
--     print("test success")
-- else
--     print("test failed")
-- end
-- local c_result = string.p_fromhex("623445623445623445623445623445623445623445623445623445623445623445623445623445623445")
-- local lua_result = string.fromhex("623445623445623445623445623445623445623445623445623445623445623445623445623445623445")
-- if c_result == lua_result then
--     print("test success")
-- else
--     print("test failed")
-- end

-- local c_result = string.p_fromhex("623445623445623445623445623445623445623445623445623445623445623445623445623445623445623445623445623445623445623445623445623445")
-- local lua_result = string.fromhex("623445623445623445623445623445623445623445623445623445623445623445623445623445623445623445623445623445623445623445623445623445")
-- if c_result == lua_result then
--     print("test success")
-- else
--     print("test failed")
-- end
-- -- ====================== end test fromhex func ======================

-- -- ====================== test tohex func ======================

-- print('==================================TEST TOHEX FUNC====================================')
-- local start_timestamp = pontus_timestamp_ms()
-- for i=1,100000 do
--     string.p_tohex("nihaozheshiwodejjjj")
-- end
-- local end_timestamp = pontus_timestamp_ms()
-- print('tohex C++:', end_timestamp - start_timestamp)


-- local start_timestamp = pontus_timestamp_ms()
-- for i=1,100000 do
--     string.tohex("nihaozheshiwodejjjj")
-- end
-- local end_timestamp = pontus_timestamp_ms()
-- print('tohex LUA', end_timestamp - start_timestamp)

-- local c_result = string.p_tohex("nihaozheshiwodejjjj")
-- local lua_result = string.tohex("nihaozheshiwodejjjj")
-- print(c_result,lua_result)
-- if c_result == lua_result then
--     print("test success")
-- else
--     print("test failed")
-- end

-- -- ====================== end test tohex func ======================


-- -- ====================== test utf16le_to_utf8 func ======================

-- print('==================================TEST UTF16LE_TO_UTF8 FUNC====================================')
-- local start_timestamp = pontus_timestamp_ms()
-- for i=1,100000 do
--     string.p_utf16le_to_utf8("\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4")
-- end
-- local end_timestamp = pontus_timestamp_ms()
-- print('utf16le_to_utf8 C++:', end_timestamp - start_timestamp)


-- local start_timestamp = pontus_timestamp_ms()
-- for i=1,100000 do
--     string.utf16le_to_utf8("\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4")
-- end
-- local end_timestamp = pontus_timestamp_ms()
-- print('utf16le_to_utf8 LUA', end_timestamp - start_timestamp)

-- local c_result = string.p_utf16le_to_utf8("\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\x00\x00\xe4\xe4")
-- local lua_result = string.utf16le_to_utf8("\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\xe4\x00\x00\xe4\xe4")

-- if c_result == lua_result then
--     print("test success")
-- else
--     print("test failed")
-- end

-- -- ====================== end test utf16le_to_utf8 func ======================

-- -- ====================== test utf8_to_utf16le func ======================

-- print('==================================TEST UTF8_TO_UTF16LE FUNC====================================')
-- local start_timestamp = pontus_timestamp_ms()
-- for i=1,100000 do
--     string.p_utf8_to_utf16le("你\0好")
-- end
-- local end_timestamp = pontus_timestamp_ms()
-- print('utf8_to_utf16le C++:', end_timestamp - start_timestamp)


-- local start_timestamp = pontus_timestamp_ms()
-- for i=1,100000 do
--     string.utf8_to_utf16le("你\0好")
-- end
-- local end_timestamp = pontus_timestamp_ms()
-- print('utf8_to_utf16le LUA:', end_timestamp - start_timestamp)

-- local c_result = string.p_utf8_to_utf16le("你\0好你\0好你\0好你\0好你\0好你\0好你\0好你\0好你\0好你\0好你\0好")
-- local lua_result = string.utf8_to_utf16le("你\0好你\0好你\0好你\0好你\0好你\0好你\0好你\0好你\0好你\0好你\0好")


-- if c_result == lua_result then
--     print("test success")
-- else
--     print("test failed")
-- end

-- -- ====================== end test utf8_to_utf16le func ======================


-- -- ====================== test trim func ======================
-- print('==================================TEST TRIM FUNC====================================')
-- local start_timestamp = pontus_timestamp_ms()
-- for i=1,100000 do
--     string.p_trim("   你好         ")
-- end
-- local end_timestamp = pontus_timestamp_ms()
-- print('trim C++:', end_timestamp - start_timestamp)


-- local start_timestamp = pontus_timestamp_ms()
-- for i=1,100000 do
--     string.trim("   你好         ")
-- end
-- local end_timestamp = pontus_timestamp_ms()
-- print('trim LUA', end_timestamp - start_timestamp)

-- local c_result = string.p_trim("    你好          ")
-- local lua_result = string.trim("    你好          ")


-- if c_result == lua_result then
--     print("test success")
-- else
--     print("test failed")
-- end

-- -- ====================== end test trim func ======================

-- -- ====================== test bytes2string func ======================
-- print('==================================TEST BYTES2STRING FUNC====================================')
-- local start_timestamp = pontus_timestamp_ms()
-- for i=1,100000 do
--     string.p_bytes2string("Hello\0World")
-- end
-- local end_timestamp = pontus_timestamp_ms()
-- print('bytes2string C++:', end_timestamp - start_timestamp)


-- local start_timestamp = pontus_timestamp_ms()
-- for i=1,100000 do
--     string.bytes2string("2Hello\0World")
-- end
-- local end_timestamp = pontus_timestamp_ms()
-- print('bytes2string LUA:', end_timestamp - start_timestamp)

-- local c_result = string.p_bytes2string("Hello\0World")
-- local lua_result = string.bytes2string("Hello\0World")


-- if c_result == lua_result then
--     print("test success")
-- else
--     print("test failed")
-- end

-- -- ====================== end test bytes2string func ======================

-- -- ====================== test random func ======================
-- print('==================================TEST RANDOM FUNC====================================')
-- local start_timestamp = pontus_timestamp_ms()
-- for i=1,100000 do
--     string.p_random(20)
-- end
-- local end_timestamp = pontus_timestamp_ms()
-- print('random C++:', end_timestamp - start_timestamp)


-- local start_timestamp = pontus_timestamp_ms()
-- for i=1,100000 do
--     string.random(20)
-- end
-- local end_timestamp = pontus_timestamp_ms()
-- print('random LUA:', end_timestamp - start_timestamp)

-- local c_result = string.p_random(10)
-- local lua_result = string.random(10)

-- print("c_result",c_result,#c_result , '--')
-- print("lua_result", lua_result, #lua_result , '--')

-- -- ====================== end test random func ======================

-- -- print(pontus_timestamp_ms())
-- -- print(pontus_timestamp_us())

-- -- print(pontus_base64_encode("ABC"))
-- -- print(pontus_base64_encode("你好"))
-- -- print(pontus_base64_decode("5L2g5aW9"))


--print(string.format("crc16 test:0X%X", string.crc16("123456789")))
--print(string.format("crc32 test:0X%X", string.crc32("123456789")))
--
--
--print("账号合规测试:")
---- 游戏 2139 账号 104418966734505256   -> ACEHASH_80e84738e92fa64c0536ed120351b3be
--print(pontus_account_to_acehash(2139, "104418966734505256"))

